
// backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  avatar        String?
  timezone      String    @default("UTC")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  integrations  Integration[]
  workflows     Workflow[]
  tasks         Task[]
  chatSessions  ChatSession[]
  
  @@map("users")
}

model Integration {
  id            String    @id @default(cuid())
  userId        String
  type          IntegrationType
  name          String
  isConnected   Boolean   @default(false)
  accessToken   String?
  refreshToken  String?
  expiresAt     DateTime?
  lastSync      DateTime?
  category      String    @default("Other")
  metadata      Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflowSteps WorkflowStep[]
  
  @@map("integrations")
}

enum IntegrationType {
  GMAIL
  GOOGLE_CALENDAR
  NOTION
  SLACK
  HUBSPOT
  LINEAR
  PHONE
  GOOGLE_DRIVE
  GOOGLE_SHEETS
  GOOGLE_DOCS
}

model Workflow {
  id            String    @id @default(cuid())
  userId        String
  name          String
  description   String?
  isActive      Boolean   @default(true)
  trigger       Json      // Trigger configuration
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  steps         WorkflowStep[]
  executions    WorkflowExecution[]
  
  @@map("workflows")
}

model WorkflowStep {
  id            String    @id @default(cuid())
  workflowId    String
  integrationId String
  stepOrder     Int
  action        String
  parameters    Json
  createdAt     DateTime  @default(now())
  
  // Relationships
  workflow      Workflow    @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  
  @@map("workflow_steps")
}

model WorkflowExecution {
  id            String    @id @default(cuid())
  workflowId    String
  status        ExecutionStatus
  startedAt     DateTime  @default(now())
  completedAt   DateTime?
  error         String?
  logs          Json?
  
  // Relationships
  workflow      Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  @@map("workflow_executions")
}

enum ExecutionStatus {
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

model Task {
  id            String    @id @default(cuid())
  userId        String
  title         String
  description   String?
  status        TaskStatus @default(PENDING)
  priority      TaskPriority @default(MEDIUM)
  dueDate       DateTime?
  completedAt   DateTime?
  source        String?   // Which integration created this task
  sourceId      String?   // ID in the source system
  metadata      Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("tasks")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model ChatSession {
  id            String    @id @default(cuid())
  userId        String
  title         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      ChatMessage[]
  
  @@map("chat_sessions")
}

model ChatMessage {
  id            String    @id @default(cuid())
  sessionId     String
  role          MessageRole
  content       String
  metadata      Json?
  createdAt     DateTime  @default(now())
  
  // Relationships
  session       ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@map("chat_messages")
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

model IntegrationLog {
  id            String    @id @default(cuid())
  userId        String
  integration   IntegrationType
  action        String
  status        String
  requestData   Json?
  responseData  Json?
  error         String?
  createdAt     DateTime  @default(now())
  
  @@map("integration_logs")
}

model ApiKey {
  id            String    @id @default(cuid())
  userId        String
  name          String
  key           String    @unique
  permissions   Json      // Array of permissions
  lastUsed      DateTime?
  createdAt     DateTime  @default(now())
  expiresAt     DateTime?
  
  @@map("api_keys")
}

model Notification {
  id            String    @id @default(cuid())
  userId        String
  title         String
  message       String
  type          NotificationType
  isRead        Boolean   @default(false)
  metadata      Json?
  createdAt     DateTime  @default(now())
  
  @@map("notifications")
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  WORKFLOW_COMPLETED
  TASK_DUE
  INTEGRATION_ERROR
}

